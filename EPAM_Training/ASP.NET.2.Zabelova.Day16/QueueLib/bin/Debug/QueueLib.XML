<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QueueLib</name>
    </assembly>
    <members>
        <member name="T:QueueLib.ArrayQueue`1">
            <summary>
                Represents a first-in, first-out collection of objects.
            </summary>
            <typeparam name="T">Specifies the type of elements in the queue.</typeparam>
        </member>
        <member name="T:QueueLib.IQueue`1">
            <summary>
                Describes methods for FIFO collections
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:QueueLib.IQueue`1.Dequeue">
            <summary>
                Removes and returns the object at the beginning of the Queue.
            </summary>
            <returns>The object that is removed from the beginning of the Queue</returns>
        </member>
        <member name="M:QueueLib.IQueue`1.Enqueue(`0)">
            <summary>
                Adds an object to the end of the Queue.
            </summary>
            <param name="key">The object to add to the Queue.The value can be null for reference types.</param>
        </member>
        <member name="M:QueueLib.IQueue`1.Peek">
            <summary>
                Returns the object at the beginning of the Queue without removing it.
            </summary>
            <returns>The object at the beginning of the Queue</returns>
        </member>
        <member name="M:QueueLib.IQueue`1.IsEmpty">
            <summary>
                Checks whether is collection empty or not
            </summary>
            <returns>true - if collection os empty, otherwise - false</returns>
        </member>
        <member name="M:QueueLib.IQueue`1.Clear">
            <summary>
                Removes all objects from the Queue.
            </summary>
        </member>
        <member name="P:QueueLib.IQueue`1.Count">
            <summary>
                Gets the number of elements contained in the Queue.
            </summary>
        </member>
        <member name="M:QueueLib.ArrayQueue`1.#ctor">
            <summary>
                Initializes a new instance of the Queue class that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:QueueLib.ArrayQueue`1.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the Queue class that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The initial number of elements that the Queue can contain</param>
        </member>
        <member name="M:QueueLib.ArrayQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Initializes a new instance of the Queue class that contains elements copied from the specified collection and has
                sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new Queue.</param>
        </member>
        <member name="M:QueueLib.ArrayQueue`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the Queue.
            </summary>
            <returns>An Enumerator for the Queue.</returns>
        </member>
        <member name="M:QueueLib.ArrayQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:QueueLib.ArrayQueue`1.Contains(`0)">
            <summary>
                Determines whether an element is in the Queue.
            </summary>
            <param name="item">The object to locate in the Queue.The value can be null for reference types.</param>
            <returns>true if item is found in the Queue; otherwise, false.</returns>
        </member>
        <member name="T:QueueLib.ArrayQueue`1.CustomIterator">
            <summary>
                Inner class Iterator
            </summary>
        </member>
        <member name="M:QueueLib.ArrayQueue`1.CustomIterator.#ctor(QueueLib.ArrayQueue{`0})">
            <summary>
                Initializes iterator with collection
            </summary>
            <param name="collection"></param>
        </member>
        <member name="T:QueueLib.ListQueue`1">
            <summary>
                Represents a first-in, first-out collection of objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:QueueLib.ListQueue`1.#ctor">
            <summary>
                Initializes a new instance of the Queue class that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:QueueLib.ListQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Initializes a new instance of the Queue class that contains elements copied from the specified collection and has
                sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new Queue.</param>
        </member>
        <member name="M:QueueLib.ListQueue`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the Queue.
            </summary>
            <returns>An Enumerator for the Queue.</returns>
        </member>
        <member name="M:QueueLib.ListQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:QueueLib.ListQueue`1.Contains(`0)">
            <summary>
                Determines whether an element is in the Queue.
            </summary>
            <param name="item">The object to locate in the Queue.The value can be null for reference types.</param>
            <returns>true if item is found in the Queue; otherwise, false.</returns>
        </member>
        <member name="T:QueueLib.ListQueue`1.CustomIterator">
            <summary>
                Inner class Iterator
            </summary>
        </member>
        <member name="M:QueueLib.ListQueue`1.CustomIterator.#ctor(QueueLib.ListQueue{`0})">
            <summary>
                Initializes iterator with collection
            </summary>
            <param name="collection"></param>
        </member>
    </members>
</doc>
